						Syntax-python:
1) Метод .join - Используеться для обьединения элемментов итерируемого обьекта (например, списки или кортежи) в строку  указанным разделителем 

Пример:
words = ["Python", "is", "awesome"]
result = "|".join(words)  # Разделитель — пробел
print(result)
#Responce:	Python|is|awesome

ПРИМЕР 2:
слово = ['Аббас', 'Чмо', 'Шакал', 'Канчык', 'Негр', 'мразь', 'Тупой']
result = "\n".join(слово)
print(result)
RESPONCE:
#Аббас
#Чмо
#Шакал
#Канчык
#Негр
#мразь
#Тупой

# Метод .join() отлично подходит для задач где нужно создать строку с определённым разделителем между частямии текста
____________________________________________________________________________
1) Латинские Буквы  -  это система письменности, используемая для записи латинского языка, который был языком Древнего Рима. Он состоит из набора букв, которые легли в основу современных алфавитов многих языков мира, включая английский, немецкий, французский, испанский и другие.

Современные буквы:  A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z.
Английские буквы - это латинский алфавит

____________________________________________________________________________

2)Модуль random - Это встроенный модуль, который предоставляет функции для работы со случаййными числами и элемментами. Он широко используеться для генерации случайных данных, таких как числа, выбор случайных элемментов из посследовательностей или для перемещения элемментов

Основные особенности модуля random:

1) Генерация Случайных чисел:
*random.random() - генерирует случайное число с плававющей точкой от 0.0 до 1.0

2) Работа с посследовательностями:
*random.choice(sequence) - возвращает случайный элеммент из послледовательности (списка, строки, кортежа)

*random.shuffle(sequence) перемешивает элемменты в последовательности на месте 

*random.sample(sequence, k) возвращает новый список из k случайных элемментов  посследовательности

3)Генерация чисел в диапозонах:
*random.uniform(a, b) генерирует случайнное число с плавающей точкой в диапозонах [a, b]

*random.randrange(start, stop, step) генерирует случайнное числа в указанном диапозоне с заданным шагом 

4)Настройка генераторов:
*random.seed(value) задаёт начальное число состояние генераторов случайных чисел, чтобы результат были воспроизведимы 

ПРИМЕР:
import random 		#random нужно обязательно импортировать для работы
print(random.randint(1, 10))


# random.choice 
*Выбирает случайный элеммент из итерируемого обьекта (например, списка, строки, кортежа)

# random.randint
*Генерирует случайное целое число в указанном диапозоне 


Пример обоим методам:
import random
my_choice_primer = [1, 2, 3, 4, 5]
print(random.choice(my_choice_primer))
print(random.randint(1, 11))


random.choices() - это метод 

random.choices() - это метод из модуля random, который используеться для выбора одного или нескольких случайных элемментов из итерируемого обьекта, причём с возможностью учитывать вас каждого элемента и задавать размер выборки
ПРИМЕР:

Синтаксис:
random.choices(population, weights=None, k=1)
Где:

population — последовательность, из которой выбираются элементы (например, список, строка, кортеж).

weights(масса) -  (опционально) — список весов, влияющих на вероятность выбора элементов.

k (опционально) — количество элементов, которые нужно выбрать (по умолчанию 1).

Возвращает: Список из случайно выбранных элементов.


Отличие от random.choice:
random.choice выбирает один случайный элемент.
random.choices может выбрать несколько элементов, с учётом вероятностей или без.


#random.shuffle - это метод из модуля random, который перемешивает элементы списка на месте, изменяя их порядок случайным образом.

#Короче метод shuffle перемешивает итерируемый обьект.







____________________________________________________________________________
3) Модуль string - это стандартный модуль, который предоставляет константы и функции для работы со строками. он содержит наборы символов (например, буквы, цифры, символы) и полезные функции для обработки строк

1) Константы 
Константы модуля sting - это предопределнные строки, которые удобно использовать 

*string.ascii_letters
Содержит все буквы латинского алфавита (заглавные и строчные)
import string
print(string.ascii_letters)
# Вывод обший алфавит: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'

*string.ascii_lowercase - Содержит латинский алфавит в нижнеи регистре
Содержит только строчные буквы латинского алфавита:
print(string.ascii_lowercase)
# Вывод: 'abcdefghijklmnopqrstuvwxyz'

*string.ascii_appercase - Содержит алфавит в верхнем регистре (Заглавном)
Содержит только заглавные буквы латинского алфавита:
print(string.ascii_uppercase)
# Вывод: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'


*string.digits
Содержит цифры от - до 9
print(string.digits)
# Вывод: '0123456789'


*string.punctuation
Содержит все символы пунктуации:
print(string.punctuation)
# Вывод: '!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'


*string.whitespace
Содержит пробелы, табуляции, переводы строк и другие пробельные символы:
print(string.whitespace)
# Вывод: ' \t\n\r\x0b\x0c'


#Короче в python  есть модули string - который может иметь латинские буквы, числа, алфавит в регистре и.т.д

#И есть в python модуль random - который может выдать рандомные числа 

___________________________________________________________________________________________________________________
4) Online Python - это онлайн-интерпретатор для Python, который позволяет запускать и тестировать Python-код прямо в браузере без необходимости установки Python на ваш компьютер
# Короче помогает Проверить ошибки и проверить результат кода.

____________________________________________________________________________________________________________________

5) LeetCode — это онлайн-платформа для решения задач по программированию и подготовки к собеседованиям в компании, занимающиеся технологиями. На LeetCode можно найти множество задач, которые охватывают различные темы, такие как:

Алгоритмы
Структуры данных
Математика
Математическое программирование
Логика и многие другие

___________________________________________________________________________________________________________________

6) str - методы, count, split:

1) .count() -   Метод который подсчитывает, сколько раз подстрока встречаеться
в строке
ПРИМЕР:
my_str = "Меня зовут Уметов эмирлан мне лет 16"
print(f"количество встречающихся слов:      {my_str.count('м')}")
#3



2) .split() -  Используеться для разделения строки на части (слова или подстроки)
основываясь на разделителе.
ПРИМЕР:
text = "Hello world, welcome to Python"
words = text.split('')
print(words)
#['Hello', 'world,', 'welcome', 'to', 'Python']

# .split() - разделяет строку на подстроки и возврощает эти подстроки в виде списка 
# Короче делает строки разделяет их и возвращает список 













































































